// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  fullname        String           @db.VarChar(255)
  email           String           @unique @db.VarChar(255)
  password        String           @db.VarChar(255)
  profilePic      String?
  hasNotification Boolean          @default(false)
  hasNewMessage   Boolean          @default(false)
  isVerified      Boolean          @default(false)
  verifyToken     String?
  otp             Int?
  resetCode       Int?
  role            Role
  customer        Message[]
  payment         Payment[]
  Cart            Cart[]
  billingInfo     BillingInfo?
  shippingAddress ShippingAddress?
}

model Jewelry {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String     @unique
  description  String?
  category     Category[]
  main_image   String     @db.Text
  extra_images String[]   @default([]) @db.Text
  status       Status     @default(Available)
  messages     Message[]
  price        Float
  quantity     Int        @default(0)
  cartItems    CartItem[]
}

model BillingInfo {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  address     String
  city        String
  state       String
  postalCode  String
  country     String
  phoneNumber String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
}

model ShippingAddress {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  address     String
  city        String
  state       String
  postalCode  String
  country     String
  phoneNumber String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
}

model Payment {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  paymentMethod PaymentMethod
  customer      User          @relation(fields: [customerId], references: [id])
  customerId    Int
  cart          Cart          @relation(fields: [cartId], references: [id])
  cartId        Int           @unique
}

model Message {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  message    String   @db.Text
  customer   User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  sender     SENDER
  customerId Int
  ownerId    Int
  Jewelry    Jewelry? @relation(fields: [jewelryId], references: [id])
  jewelryId  Int?
}

model Cart {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  cartStatus CartStatus @default(EMPTY)
  items      CartItem[]
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  payment    Payment?
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  image     String
  price     Float
  quantity  Int
  total     Float
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  jewelry   Jewelry  @relation(fields: [jewelryId], references: [id])
  jewelryId Int
}

enum Role {
  CUSTOMER
  OWNER
}

enum Category {
  RINGS
  EARINGS
  HAIRCLIPS
  HAIRBANDS
  BRACLETS
  NECKLACES
  BROOCHES
  SUNGLASSES
  CUPS
  PHONECASES
}

enum SENDER {
  owner
  customer
}

enum Status {
  Available
  SoldOut
}

enum CartStatus {
  EMPTY
  PENDING
  CANCELLED
  PAID
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  ONLINE_PAYMENT
}
